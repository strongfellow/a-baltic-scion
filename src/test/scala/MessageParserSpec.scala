

import org.scalatest.FlatSpec
import org.scalatest.Matchers
import a.baltic.scion.domain.payload.MessageParser
import a.baltic.scion.domain.payload.MessageWriter

class MessageParserSpec extends FlatSpec with Matchers {

  case class TestCase(n: Long, bytes: Vector[Int])

  val testCases = List(
      TestCase(0L, Vector(0)),
      TestCase(1L, Vector(1)),
      TestCase(0xfcL, Vector(0xfc)),
      TestCase(0x00fdL, Vector(0xfd, 0xfd, 0)),
      TestCase(0x00feL, Vector(0xfd, 0xfe, 0)),
      TestCase(0xfffeL, Vector(0xfd, 0xfe, 0xff)),
      TestCase(0xffffL, Vector(0xfd, 0xff, 0xff)),
      TestCase(0x00010000L, Vector(0xfe, 0x00, 0x00, 0x01, 0x00)),
      TestCase(0x00010001L, Vector(0xfe, 0x01, 0x00, 0x01, 0x00)),
      TestCase(0xfffffffeL, Vector(0xfe, 0xfe, 0xff, 0xff, 0xff)),
      TestCase(0xffffffffL, Vector(0xfe, 0xff, 0xff, 0xff, 0xff)),
      TestCase(0x0000000100000000L, Vector(0xff, 0, 0, 0, 0, 1, 0, 0, 0)),
      TestCase(0x0000010000000000L, Vector(0xff, 0, 0, 0, 0, 0, 1, 0, 0)),
      TestCase(0x0001000000000000L, Vector(0xff, 0, 0, 0, 0, 0, 0, 1, 0)),
      TestCase(0x0100000000000000L, Vector(0xff, 0, 0, 0, 0, 0, 0, 0, 1)),

      TestCase(0x00ffffffffffffffL, Vector(0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0x00)),
      TestCase(0xff00ffffffffffffL, Vector(0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00, 0xff)),
      TestCase(0xffff00ffffffffffL, Vector(0xff,0xff,0xff,0xff,0xff,0xff,0x00,0xff, 0xff)),
      TestCase(0xffffff00ffffffffL, Vector(0xff,0xff,0xff,0xff,0xff,0x00,0xff,0xff, 0xff)),
      TestCase(0xffffffff00ffffffL, Vector(0xff,0xff,0xff,0xff,0x00,0xff,0xff,0xff, 0xff)),
      TestCase(0xffffffffff00ffffL, Vector(0xff,0xff,0xff,0x00,0xff,0xff,0xff,0xff, 0xff)),
      TestCase(0xffffffffffff00ffL, Vector(0xff,0xff,0x00,0xff,0xff,0xff,0xff,0xff, 0xff)),
      TestCase(0xffffffffffffff00L, Vector(0xff,0x00,0xff,0xff,0xff,0xff,0xff,0xff, 0xff)),
      TestCase(0xfffffffffffffffeL, Vector(0xff,0xfe,0xff,0xff,0xff,0xff,0xff,0xff, 0xff)),
      TestCase(0xffffffffffffffffL, Vector(0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xff))
  )

  def check(vector: Vector[Long], expected: Long): Unit = {
    MessageParser.parseVarInt(vector.map(_.toByte), 0) should be(Some(expected, vector.length))
  }

  "0" should "parse correctly" in {
    val v = Vector(0.toByte)
    val actual = MessageParser.parseVarInt(v, 0)
    val expected = Some((0L, 1))
    actual should be(expected)


    for (x <- 0L until 0xfdL) {
      check(Vector(x.toByte), x)
    }
    for (x <- 0xfd until 0x10000) {
      check(Vector(0xfd, (x & 0xff),  (x >> 8) & 0xff), x)
    }

    testCases.foreach {
      case TestCase(n, v) => {
        val bytes = v.map(_.toByte)
        MessageParser.parseVarInt(bytes, 0) should be(Some(n, bytes.length))
        MessageWriter.writeVarInt(n) should be(bytes)
      }
    }
  }
}
